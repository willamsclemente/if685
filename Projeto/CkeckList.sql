
-- 1. O tipo TP_FUNCIONARIO é supertipo dos tipos TP_INSTRUMENTISTA e TP_PROJETISTA

CREATE OR REPLACE TYPE TP_FUNCIONARIO AS OBJECT(
CPF VARCHAR2(11),
NOME VARCHAR2(20),
SOBRENOME VARCHAR2(20),
IDADE NUMBER,
DATA_ENTRADA DATE,
TELEFONE TP_NT_FONE,
REF_CHEFE REF TP_FUNCIONARIO
) NOT FINAL NOT INSTANTIABLE;

CREATE OR REPLACE TYPE TP_INSTRUMENTISTA under TP_FUNCIONARIO(
TURNO VARCHAR2(9)
)FINAL;


CREATE OR REPLACE TYPE TP_PROJETISTA under TP_FUNCIONARIO(
ESPECIALIZACAO VARCHAR2(20),
FORMACAO_SUP VARCHAR2(20),
CREA VARCHAR2(15)
)FINAL;

--2. O tipo TP_REGISTRO possui um atributo cujo tipo é TP_LOCALIZACAO

CREATE OR REPLACE TYPE TP_LOCALIZACAO AS OBJECT(
RUA VARCHAR2(20),
BAIRRO VARCHAR2(20),
CIDADE VARCHAR2(20)
COORDENADA_LG NUMBER,
COORDENADA_LA NUMBER
);

CREATE OR REPLACE TYPE TP_REGISTRO AS OBJECT(
NOME VARCHAR(20),
SEXO CHAR(1),
IDADE NUMBER,
DATA_NASC DATE,
ENDERECO TP_LOCALIZACAO
);

--3. O TP_VA_EPI é tipo VARRAY DO TP_EPI, é possível armazenar informação de 5 objetos tipo TP_EPI nele.

CREATE OR REPLACE TYPE TP_EPI AS OBJECT(
  ID_PROPRIETARIO VARCHAR(10),
  NIVEL_SEG NUMBER,
  PROTECAO VARCHAR(20)
);

CREATE OR REPLACE TYPE TP_VA_EPI AS VARRAY(5) OF TP_EPI;

--4 O tipo TP_EPI do item 3 é utilizado no item 4 para criar um tipo tabela TP_NT_EPI.
-- A partir do TP_NT_EPI criasse um NESTED TABLE
--(relação entre atributo LISTA_EPI contido no tipo TP_LISTA_EPI e tabela TB_LISTA_EPI criada a partir desse tipo)

CREATE OR REPLACE TYPE TP_NT_EPI AS TABLE OF TP_EPI;

CREATE OR REPLACE TYPE TP_LISTA_EPI AS OBJECT(
  ID_GRUPO NUMBER,
  LISTA_EPI TP_NT_EPI
);

CREATE TABLE TB_LISTA_EPI OF TP_LISTA_EPI
NESTED TABLE LISTA_EPI STORE AS TB_LISTA_EPI

--5 Adicionando um construtor em projetos que não recebe a descrição
ALTER TYPE TP_PROJETOS
ADD CONSTRUCTOR FUNCTION TP_PROJETOS (COD_PROJ VARCHAR2, CLIENTE VARCHAR2)RETURN SELF AS RESULT
CASCADE;
CREATE OR REPLACE TYPE BODY TP_PROJETOS AS
CONSTRUCTOR FUNCTION TP_PROJETOS (COD_PROJ VARCHAR2, CLIENTE VARCHAR2)
RETURN SELF AS RESULT
AS
BEGIN
SELF.COD_PROJ := COD_PROJ;
SELF.CLIENTE := CLIENTE;
SELF.DESCRICAO := 'Nao especificada pelo usuario';
RETURN;
END;
END;
/

DECLARE
b TP_PROJETOS;
BEGIN
b := NEW TP_PROJETOS('7475005', 'FELIPE');
INSERT INTO TB_ VALUES (b.COD_PROJ, b.CLIENTE);
END;
/

--6 Adicionando uma member em Funcionario que retorna o tempo de trabalho dele
ALTER TYPE TP_FUNCIONARIO
ADD MEMBER FUNCTION tempoTrabalho RETURN NUMBER CASCADE;
CREATE OR REPLACE TYPE BODY TP_FUNCIONARIO AS
MEMBER FUNCTION tempoTrabalho RETURN NUMBER IS
BEGIN
RETURN ((SYSDATE - DATA_ENTRADA/365);
END;
END;
/
DECLARE
proj TP_PROJETISTA;
BEGIN
SELECT DEREF (P) INTO proj
FROM TB_PROJETISTA P
WHERE P.CPF = '41709757064';
DBMS_OUTPUT.PUT_LINE('Tempo de trabalho: ' || proj.tempoTrabalho());
END;
/

-- Adicionando MAP MEMBER que retorna o cpf do funcionario
ALTER TYPE TP_FUNCIONARIO
ADD MAP MEMBER FUNCTION retCPF RETURN VARCHAR2 CASCADE;
CREATE OR REPLACE TYPE BODY TP_FUNCIONARIO AS
MAP MEMBER FUNCTION retCPF RETURN VARCHAR2 IS
BEGIN
RETURN CPF;
END;
END;
/
DECLARE
inst TP_INSTRUMENTISTA;
BEGIN
SELECT DEREF (I) INTO inst
FROM TB_INSTRUMENTISTA I
WHERE I.CPF = '34650650957';
DBMS_OUTPUT.PUT_LINE('Cpf' || inst.retCPF());
END;
/

--9 Adicionando ORDER MEMBER que retorna a comparacao das idades dos funcionarios
ALTER TYPE TP_FUNCIONARIO
ADD ORDER MEMBER FUNCTION func_mais_velho(proj TP_FUNCIONARIO) RETURN NUMBER CASCADE;
CREATE OR REPLACE TYPE BODY TP_FUNCIONARIO AS
ORDER MEMBER FUNCTION func_mais_velho(proj TP_FUNCIONARIO)
RETURN NUMBER IS
BEGIN
IF SELF.IDADE > proj.IDADE THEN
RETURN 1;
ELSIF SELF.IDADE < proj.IDADE THEN
RETURN -1;
ELSE
RETURN 0;
END IF;
END;
END;
/
DECLARE
t1 TP_INSTRUMENTISTA;
t2 TP_INSTRUMENTISTA;
r NUMBER;
BEGIN
SELECT VALUE(T) INTO t1 FROM TP_INSTRUMENTISTA T WHERE T.CPF = '34650650957';
SELECT VALUE(T) INTO t2 FROM TP_INSTRUMENTISTA T WHERE T.CPF = '12643161645';
r := t1.func_mais_velho(t2);
IF r < 0 THEN
DBMS_OUTPUT.PUT_LINE(t1.NOME||' e mais velho '||t2.NOME);
ELSIF r > 0 THEN
DBMS_OUTPUT.PUT_LINE(t1.NOME||' e mais novo que ' ||t2.NOME);
ELSt
DBMS_OUTPUT.PUT_LINE(t1.NOME||' tem a mesma idade que '||t2.NOME);
END IF;
END;
/

--10 Reescrevendo a retCPF, para retornar o sobrenome
ALTER TYPE TP_PROJETISTA
ADD OVERRIDING MAP MEMBER FUNCTION retCPF RETURN VARCHAR2 CASCADE;
CREATE OR REPLACE TYPE BODY TP_PROJETISTA AS
OVERRIDING MAP MEMBER FUNCTION retCPF RETURN VARCHAR2 IS
BEGIN
RETURN SOBRENOME;
END;
END;
/


--11 ADICIONANDO atributo sexo em funcionario
ALTER TYPE TP_FUNCIONARIO ADD ATTRIBUTE (SEXO CHAR(1)) CASCADE;

--12 Altereando o nome de funcionario para VARCHAR2(50)
ALTER TYPE TP_FUNCIONARIO MODIFY ATTRIBUTE NOME VARCHAR(50) CASCADE;

--13 Excluindo o atributo sexo de funcionario
ALTER TYPE TP_FUNCIONARIO DROP ATTRIBUTE (SEXO CHAR(1)) CASCADE;

--14 Modificando o atributo do supertipo em cascata
ALTER TYPE TP_INSTRUMENTOS MODIFY ATTRIBUTE UNID_ENG VARCHAR2(10) CASCADE;

--15 Alterando o supertipo instrumentos e invalidando os supertipos
ALTER TYPE TP_INSTRUMENTOS FINAL INVALIDATE;

--16 Usando o deref para mostrar todos os objetos da tabela fluxograma
SELECT DEREF(T.REF_PROJETISTA) AS Projetista
FROM TB_FLUXOGRAMA T 

--17 Usando VALUE para mostrar os objetos de Planta
SELECT VALUE(C) INTO Planta
FROM TB_PLANTA_INDUSTRIAL C 
WHERE C.TAG_PLANTA = '2100';

--23
--LIKE
-- RETORNANDO os cps dos projetistas que tem o nome que começa com N
SELECT T.CPF
FROM TB_PROJETISTA T
WHERE T.NOME LIKE 'N??????';

--BETWEEN
-- Retornando a TAG  dos sensores com MAX_VAL entre 0 E 5
SELECT S.TAG_INST
FROM TB_SENSORES S
WHERE S.MAX_VAL BETWEEN 0 AND 5;

--ORDER BY
--Retornando a vedacao das valvulas ordenando pelo diametro
SELECT T.VEDACAO
FROM TB_VALVULAS T
ORDER BY T.DIAMETRO DESC;

--GROUP BY 
--Agrupando os codigos do projetos pelos fluxos
SELECT F.REF_PROJETOS.COD_PROJ AS CODIGO, COUNT(*)
FROM TB_FLUXOINST F
GROUP BY F.REF_PROJETOS.COD_PROJ;

--HAVING
SELECT F.REF_INSTRUMENTOS.TAG_INST AS TAG, COUNT(*)
FROM TB_FLUXOINST T
GROUP BY F.REF_INSTRUMENTOS.TAG_INST
HAVING COUNT(*) > 2;

--24
--IN
--Retornando os instrumentistas com Idade de 21,22,24
SELECT DEREF(T) AS Instrumentista
FROM TB_INSTRUMENTISTA T
WHERE T.IDADE IN(21,22,24);

--ALL
--Retornando os Projetistas com Idade maior que os outros
SELECT DEREF(P) AS Projetista
FROM TB_PROJETISTA P
WHERE P.IDADE > ALL (SELECT T.IDADE
                     FROM TB_PROJETISTA T
					 WHERE T.CPF <> P.CPF);
--ANY
SELECT T.NOME
FROM TB_INSTRUMENTISTA T
FROM T.CPF = ANY (SELECT P.CPF
                  FROM TB_INSTRUMENTISTA P
				  WHERE P.IDADE < 24);
				  





